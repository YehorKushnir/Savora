datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Wallet {
  id       String        @id @default(cuid())
  name     String
  icon     String
  balance  Decimal
  type     String
  currency String
  outgoing Transaction[] @relation("TransactionSource")
  incoming Transaction[] @relation("TransactionTarget")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id            String        @id @default(cuid())
  name          String
  icon          String
  type          String
  transctions   Transaction[]
  subcategories Subcategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subcategory {
  id          String        @id @default(cuid())
  name        String
  transctions Transaction[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

model Transaction {
  id            String  @id @default(cuid())
  description   String
  type          String
  amount        Decimal
  tag           String?
  balanceBefore Decimal
  balanceAfter  Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sourceWalletId String?
  sourceWallet   Wallet?      @relation("TransactionSource", fields: [sourceWalletId], references: [id])
  targetWalletId String?
  targetWallet   Wallet?      @relation("TransactionTarget", fields: [targetWalletId], references: [id])
  Category       Category?    @relation(fields: [categoryId], references: [id])
  categoryId     String?
  Subcategory    Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId  String?

  @@index([sourceWalletId, createdAt])
  @@index([targetWalletId, createdAt])
}
