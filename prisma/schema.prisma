datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  settings      UserSettings?
  vaults        Vault[]
  transactions  Transaction[]
  tags          Tag[]
  auditLogs     AuditLog[]

  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSettings {
  userId         String @id
  locale         String @default("en")
  currency       String @default("EUR")
  firstDayOfWeek Int    @default(1)
  user           User   @relation(fields: [userId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// ENUMS

enum VaultType {
  asset
  liability
  income
  expense
  equity
}

enum EntryType {
  debit
  credit
}

enum TransactionType {
  expense
  income
  transfer
  adjustment
}

// MODELS

model Vault {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  name      String
  type      VaultType
  balance   Decimal   @default(0) @db.Decimal(18, 2)
  currency  String    @default("EUR")
  entries   Entry[]
  archived  Boolean   @default(false)
  createdAt DateTime  @default(now())
}

model Transaction {
  id           String          @id @default(cuid())
  userId       String
  user         User            @relation(fields: [userId], references: [id])
  type         TransactionType
  description  String?
  executedAt   DateTime        @default(now())
  entries      Entry[]
  tags         Tag[]           @relation("TransactionTags")
  exchangeRate Decimal?
  baseAmount   Decimal?
  createdAt    DateTime        @default(now())
}

model Entry {
  id            String      @id @default(cuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  vaultId       String
  vault         Vault       @relation(fields: [vaultId], references: [id])
  type          EntryType
  amount        Decimal     @db.Decimal(18, 2)
  balanceBefore Decimal     @db.Decimal(18, 2)
  balanceAfter  Decimal     @db.Decimal(18, 2)
  createdAt     DateTime    @default(now())
}

// TAGGING & ANALYTICS

model Tag {
  id           String        @id @default(cuid())
  name         String
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[] @relation("TransactionTags")
  createdAt    DateTime      @default(now())
}

// SYSTEM / LOGGING

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  metadata  Json
  createdAt DateTime @default(now())
}

// CURRENCY & HISTORY

model Currency {
  code       String   @id
  symbol     String
  rateToBase Decimal  @db.Decimal(18, 6)
  updatedAt  DateTime @default(now())
}

model CurrencyHistory {
  id         String   @id @default(cuid())
  code       String
  rateToBase Decimal  @db.Decimal(18, 6)
  date       DateTime
}
