datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  settings      UserSettings?
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSettings {
  userId         String @id
  locale         String @default("en")
  currency       String @default("EUR")
  firstDayOfWeek Int    @default(1)
  user           User   @relation(fields: [userId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum AccountType {
  ASSET
  INCOME
  EXPENSEE
  QUITY
}
enum TransactionStatus {
  pending
  posted
  void
}
enum TransactionKind {
  generic
  transfer
}

model LedgerAccount {
  id       String      @id @default(cuid())
  userId   String
  name     String
  type     AccountType
  currency String?
  icon     String?
  color    String?
  archived Boolean     @default(false)
  sort     Int         @default(0)

  parentId String?
  parent   LedgerAccount?  @relation("LedgerAccountHierarchy", fields: [parentId], references: [id])
  children LedgerAccount[] @relation("LedgerAccountHierarchy")

  balance Decimal @default(0) @db.Decimal(18, 2)

  entries Entry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, archived])
  @@index([parentId, sort])
  @@unique([userId, name, type, parentId])
}

model Transaction {
  id        String            @id @default(cuid())
  userId    String
  kind      TransactionKind   @default(generic)
  status    TransactionStatus @default(posted)
  note      String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  sourceAccountId String?
  sourceAccount   LedgerAccount? @relation("TxSource", fields: [sourceAccountId], references: [id], onDelete: SetNull)
  targetAccountId String?
  targetAccount   LedgerAccount? @relation("TxTarget", fields: [targetAccountId], references: [id], onDelete: SetNull)

  fxRate         Decimal? @db.Decimal(20, 10)
  idempotencyKey String?  @unique

  entries Entry[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt, id])
  @@index([sourceAccountId, createdAt, id])
  @@index([targetAccountId, createdAt, id])
}

model Entry {
  id            String  @id @default(cuid())
  transactionId String
  accountId     String
  amount        Decimal @db.Decimal(18, 2)

  createdAt DateTime @default(now())

  transaction Transaction   @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  account     LedgerAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId, createdAt, id])
  @@index([transactionId])
}
